import os
import logging
import telebot
import requests
from bs4 import BeautifulSoup
from threading import Timer
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ª–æ–≥–≥–µ—Ä–∞
load_dotenv()
logging.basicConfig(level=logging.INFO)

class VinChecker:
    def __init__(self):
        self.bot = telebot.TeleBot(os.getenv('TELEGRAM_TOKEN'))
        self.vin = os.getenv('VIN_NUMBER')
        self.chat_id = os.getenv('CHAT_ID')
        self.last_result = None
        self.check_interval = int(os.getenv('CHECK_INTERVAL', 86400))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.bot.message_handler(commands=['start', 'help'])(self.send_welcome)
        self.bot.message_handler(commands=['check'])(self.manual_check)
        
    def send_welcome(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ start/help"""
        self.bot.reply_to(message, "üîç –ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∞–∫—Ü–∏–π Geely –ø–æ VIN. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/check - —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")

    def start_periodic_check(self):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        self.schedule_check()
        self.bot.polling(none_stop=True)

    def schedule_check(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        Timer(self.check_interval, self.schedule_check).start()
        self.automatic_check()

    def automatic_check(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            result = self.fetch_vin_data()
            if result and result != "–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π –Ω–µ—Ç" and result != self.last_result:
                self.last_result = result
                self.bot.send_message(self.chat_id, f"üîî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:\n{result}")
                logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")

    def manual_check(self, message):
        """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /check"""
        try:
            result = self.fetch_vin_data()
            response = result if result else "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
            self.bot.reply_to(message, response)
        except Exception as e:
            self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            logging.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")

    def fetch_vin_data(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ VIN"""
        with requests.Session() as session:
            try:
                # –ü–µ—Ä–≤–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cookies
                session.get(
                    'https://www.geely-motors.com/for-owners/technical-center/technical-campaigns',
                    headers={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
                )

                # –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
                response = session.post(
                    'https://www.geely-motors.com/local/ajax/technicalcampaigns_redesign.php',
                    data={
                        'vin': self.vin,
                        'sessid': session.cookies.get('PHPSESSID', ''),
                        'ajaxAction': 'checkVin',
                        'componentName': 'geely:technical.campaigns'
                    },
                    headers={
                        'Bx-ajax': 'true',
                        'X-Requested-With': 'XMLHttpRequest',
                        'Referer': 'https://www.geely-motors.com/for-owners/technical-center/technical-campaigns'
                    }
                )

                if response.status_code == 200:
                    data = response.json()
                    if data.get('status') == 'success':
                        soup = BeautifulSoup(data.get('html', ''), 'html.parser')
                        result = soup.find('p', class_='technical-campaigns__vin-search-table-text')
                        return result.text if result else "–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π –Ω–µ—Ç"
                    return data.get('data', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
                return "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"

            except requests.RequestException as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
                return None

if __name__ == '__main__':
    checker = VinChecker()
    checker.start_periodic_check()
